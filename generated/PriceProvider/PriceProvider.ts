// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PriceProviderOwnershipTransferred extends ethereum.Event {
  get params(): PriceProviderOwnershipTransferred__Params {
    return new PriceProviderOwnershipTransferred__Params(this);
  }
}

export class PriceProviderOwnershipTransferred__Params {
  _event: PriceProviderOwnershipTransferred;

  constructor(event: PriceProviderOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetTokenOracle extends ethereum.Event {
  get params(): SetTokenOracle__Params {
    return new SetTokenOracle__Params(this);
  }
}

export class SetTokenOracle__Params {
  _event: SetTokenOracle;

  constructor(event: SetTokenOracle) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PriceProvider extends ethereum.SmartContract {
  static bind(address: Address): PriceProvider {
    return new PriceProvider("PriceProvider", address);
  }

  getCurrentPrice(token: Address): BigInt {
    let result = super.call(
      "getCurrentPrice",
      "getCurrentPrice(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentPrice(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPrice",
      "getCurrentPrice(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSafePrice(token: Address): BigInt {
    let result = super.call("getSafePrice", "getSafePrice(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getSafePrice(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSafePrice",
      "getSafePrice(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValueOfAsset(token: Address, quote: Address): BigInt {
    let result = super.call(
      "getValueOfAsset",
      "getValueOfAsset(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(quote)]
    );

    return result[0].toBigInt();
  }

  try_getValueOfAsset(
    token: Address,
    quote: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValueOfAsset",
      "getValueOfAsset(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(quote)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairHasOracle(token: Address, quote: Address): boolean {
    let result = super.call(
      "pairHasOracle",
      "pairHasOracle(address,address):(bool)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(quote)]
    );

    return result[0].toBoolean();
  }

  try_pairHasOracle(
    token: Address,
    quote: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "pairHasOracle",
      "pairHasOracle(address,address):(bool)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(quote)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  priceOracle(param0: Address): Address {
    let result = super.call("priceOracle", "priceOracle(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_priceOracle(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "priceOracle",
      "priceOracle(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenHasOracle(token: Address): boolean {
    let result = super.call(
      "tokenHasOracle",
      "tokenHasOracle(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_tokenHasOracle(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenHasOracle",
      "tokenHasOracle(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateSafePrice(token: Address): BigInt {
    let result = super.call(
      "updateSafePrice",
      "updateSafePrice(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_updateSafePrice(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateSafePrice",
      "updateSafePrice(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTokenOracleCall extends ethereum.Call {
  get inputs(): SetTokenOracleCall__Inputs {
    return new SetTokenOracleCall__Inputs(this);
  }

  get outputs(): SetTokenOracleCall__Outputs {
    return new SetTokenOracleCall__Outputs(this);
  }
}

export class SetTokenOracleCall__Inputs {
  _call: SetTokenOracleCall;

  constructor(call: SetTokenOracleCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetTokenOracleCall__Outputs {
  _call: SetTokenOracleCall;

  constructor(call: SetTokenOracleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateSafePriceCall extends ethereum.Call {
  get inputs(): UpdateSafePriceCall__Inputs {
    return new UpdateSafePriceCall__Inputs(this);
  }

  get outputs(): UpdateSafePriceCall__Outputs {
    return new UpdateSafePriceCall__Outputs(this);
  }
}

export class UpdateSafePriceCall__Inputs {
  _call: UpdateSafePriceCall;

  constructor(call: UpdateSafePriceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSafePriceCall__Outputs {
  _call: UpdateSafePriceCall;

  constructor(call: UpdateSafePriceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
