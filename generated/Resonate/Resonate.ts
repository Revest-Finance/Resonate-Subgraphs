// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BatchInterestClaimed extends ethereum.Event {
  get params(): BatchInterestClaimed__Params {
    return new BatchInterestClaimed__Params(this);
  }
}

export class BatchInterestClaimed__Params {
  _event: BatchInterestClaimed;

  constructor(event: BatchInterestClaimed) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fnftIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get claimer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountInterest(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CapitalActivated extends ethereum.Event {
  get params(): CapitalActivated__Params {
    return new CapitalActivated__Params(this);
  }
}

export class CapitalActivated__Params {
  _event: CapitalActivated;

  constructor(event: CapitalActivated) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get numPackets(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get principalFNFT(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositERC20OutputReceiver extends ethereum.Event {
  get params(): DepositERC20OutputReceiver__Params {
    return new DepositERC20OutputReceiver__Params(this);
  }
}

export class DepositERC20OutputReceiver__Params {
  _event: DepositERC20OutputReceiver;

  constructor(event: DepositERC20OutputReceiver) {
    this._event = event;
  }

  get mintTo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fnftId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get extraData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class DequeueConsumer extends ethereum.Event {
  get params(): DequeueConsumer__Params {
    return new DequeueConsumer__Params(this);
  }
}

export class DequeueConsumer__Params {
  _event: DequeueConsumer;

  constructor(event: DequeueConsumer) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dequeuer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get position(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get order(): DequeueConsumerOrderStruct {
    return changetype<DequeueConsumerOrderStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class DequeueConsumerOrderStruct extends ethereum.Tuple {
  get packetsRemaining(): BigInt {
    return this[0].toBigInt();
  }

  get depositedShares(): BigInt {
    return this[1].toBigInt();
  }

  get owner(): Bytes {
    return this[2].toBytes();
  }
}

export class DequeueProvider extends ethereum.Event {
  get params(): DequeueProvider__Params {
    return new DequeueProvider__Params(this);
  }
}

export class DequeueProvider__Params {
  _event: DequeueProvider;

  constructor(event: DequeueProvider) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dequeuer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get position(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get order(): DequeueProviderOrderStruct {
    return changetype<DequeueProviderOrderStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class DequeueProviderOrderStruct extends ethereum.Tuple {
  get packetsRemaining(): BigInt {
    return this[0].toBigInt();
  }

  get depositedShares(): BigInt {
    return this[1].toBigInt();
  }

  get owner(): Bytes {
    return this[2].toBytes();
  }
}

export class EnqueueConsumer extends ethereum.Event {
  get params(): EnqueueConsumer__Params {
    return new EnqueueConsumer__Params(this);
  }
}

export class EnqueueConsumer__Params {
  _event: EnqueueConsumer;

  constructor(event: EnqueueConsumer) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get position(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shouldFarm(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get order(): EnqueueConsumerOrderStruct {
    return changetype<EnqueueConsumerOrderStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class EnqueueConsumerOrderStruct extends ethereum.Tuple {
  get packetsRemaining(): BigInt {
    return this[0].toBigInt();
  }

  get depositedShares(): BigInt {
    return this[1].toBigInt();
  }

  get owner(): Bytes {
    return this[2].toBytes();
  }
}

export class EnqueueProvider extends ethereum.Event {
  get params(): EnqueueProvider__Params {
    return new EnqueueProvider__Params(this);
  }
}

export class EnqueueProvider__Params {
  _event: EnqueueProvider;

  constructor(event: EnqueueProvider) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get position(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shouldFarm(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get order(): EnqueueProviderOrderStruct {
    return changetype<EnqueueProviderOrderStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class EnqueueProviderOrderStruct extends ethereum.Tuple {
  get packetsRemaining(): BigInt {
    return this[0].toBigInt();
  }

  get depositedShares(): BigInt {
    return this[1].toBigInt();
  }

  get owner(): Bytes {
    return this[2].toBytes();
  }
}

export class FNFTCreation extends ethereum.Event {
  get params(): FNFTCreation__Params {
    return new FNFTCreation__Params(this);
  }
}

export class FNFTCreation__Params {
  _event: FNFTCreation;

  constructor(event: FNFTCreation) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get isPrincipal(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get fnftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantityFNFTs(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FNFTRedeemed extends ethereum.Event {
  get params(): FNFTRedeemed__Params {
    return new FNFTRedeemed__Params(this);
  }
}

export class FNFTRedeemed__Params {
  _event: FNFTRedeemed;

  constructor(event: FNFTRedeemed) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get isPrincipal(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get fnftId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantityFNFTs(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeeCollection extends ethereum.Event {
  get params(): FeeCollection__Params {
    return new FeeCollection__Params(this);
  }
}

export class FeeCollection__Params {
  _event: FeeCollection;

  constructor(event: FeeCollection) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amountTokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InterestClaimed extends ethereum.Event {
  get params(): InterestClaimed__Params {
    return new InterestClaimed__Params(this);
  }
}

export class InterestClaimed__Params {
  _event: InterestClaimed;

  constructor(event: InterestClaimed) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get fnftId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get claimer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OracleRegistered extends ethereum.Event {
  get params(): OracleRegistered__Params {
    return new OracleRegistered__Params(this);
  }
}

export class OracleRegistered__Params {
  _event: OracleRegistered;

  constructor(event: OracleRegistered) {
    this._event = event;
  }

  get vaultAsset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paymentAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracleDispatch(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OrderWithdrawal extends ethereum.Event {
  get params(): OrderWithdrawal__Params {
    return new OrderWithdrawal__Params(this);
  }
}

export class OrderWithdrawal__Params {
  _event: OrderWithdrawal;

  constructor(event: OrderWithdrawal) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amountPackets(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fullyWithdrawn(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vault(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get payoutAsset(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get rate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get addInterestRate(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get lockupPeriod(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get packetSize(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get isFixedTerm(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get poolName(): string {
    return this._event.parameters[9].value.toString();
  }

  get creator(): Address {
    return this._event.parameters[10].value.toAddress();
  }
}

export class VaultAdapterRegistered extends ethereum.Event {
  get params(): VaultAdapterRegistered__Params {
    return new VaultAdapterRegistered__Params(this);
  }
}

export class VaultAdapterRegistered__Params {
  _event: VaultAdapterRegistered;

  constructor(event: VaultAdapterRegistered) {
    this._event = event;
  }

  get underlyingVault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultAdapter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vaultAsset(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class WithdrawERC20OutputReceiver extends ethereum.Event {
  get params(): WithdrawERC20OutputReceiver__Params {
    return new WithdrawERC20OutputReceiver__Params(this);
  }
}

export class WithdrawERC20OutputReceiver__Params {
  _event: WithdrawERC20OutputReceiver;

  constructor(event: WithdrawERC20OutputReceiver) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fnftId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get extraData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class Resonate__activatedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }

  getPrincipalId(): BigInt {
    return this.value0;
  }

  getSharesPerPacket(): BigInt {
    return this.value1;
  }

  getStartingSharesPerPacket(): BigInt {
    return this.value2;
  }

  getPoolId(): Bytes {
    return this.value3;
  }
}

export class Resonate__consumerQueueResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }

  getPacketsRemaining(): BigInt {
    return this.value0;
  }

  getDepositedShares(): BigInt {
    return this.value1;
  }

  getOwner(): Bytes {
    return this.value2;
  }
}

export class Resonate__poolsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getAsset(): Address {
    return this.value0;
  }

  getVault(): Address {
    return this.value1;
  }

  getAdapter(): Address {
    return this.value2;
  }

  getLockupPeriod(): BigInt {
    return this.value3;
  }

  getRate(): BigInt {
    return this.value4;
  }

  getAddInterestRate(): BigInt {
    return this.value5;
  }

  getPacketSize(): BigInt {
    return this.value6;
  }
}

export class Resonate__providerQueueResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: BigInt, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }

  getPacketsRemaining(): BigInt {
    return this.value0;
  }

  getDepositedShares(): BigInt {
    return this.value1;
  }

  getOwner(): Bytes {
    return this.value2;
  }
}

export class Resonate__queueMarkersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getProviderHead(): BigInt {
    return this.value0;
  }

  getProviderTail(): BigInt {
    return this.value1;
  }

  getConsumerHead(): BigInt {
    return this.value2;
  }

  getConsumerTail(): BigInt {
    return this.value3;
  }
}

export class Resonate extends ethereum.SmartContract {
  static bind(address: Address): Resonate {
    return new Resonate("Resonate", address);
  }

  PROXY_ADDRESS_LOCK(): Address {
    let result = super.call(
      "PROXY_ADDRESS_LOCK",
      "PROXY_ADDRESS_LOCK():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_PROXY_ADDRESS_LOCK(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "PROXY_ADDRESS_LOCK",
      "PROXY_ADDRESS_LOCK():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PROXY_OUTPUT_RECEIVER(): Address {
    let result = super.call(
      "PROXY_OUTPUT_RECEIVER",
      "PROXY_OUTPUT_RECEIVER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_PROXY_OUTPUT_RECEIVER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "PROXY_OUTPUT_RECEIVER",
      "PROXY_OUTPUT_RECEIVER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  REGISTRY_ADDRESS(): Address {
    let result = super.call(
      "REGISTRY_ADDRESS",
      "REGISTRY_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_REGISTRY_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "REGISTRY_ADDRESS",
      "REGISTRY_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  RESONATE_HELPER(): Address {
    let result = super.call(
      "RESONATE_HELPER",
      "RESONATE_HELPER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_RESONATE_HELPER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "RESONATE_HELPER",
      "RESONATE_HELPER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  activated(param0: BigInt): Resonate__activatedResult {
    let result = super.call(
      "activated",
      "activated(uint256):(uint256,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Resonate__activatedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  try_activated(
    param0: BigInt
  ): ethereum.CallResult<Resonate__activatedResult> {
    let result = super.tryCall(
      "activated",
      "activated(uint256):(uint256,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Resonate__activatedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes()
      )
    );
  }

  consumerQueue(param0: Bytes, param1: BigInt): Resonate__consumerQueueResult {
    let result = super.call(
      "consumerQueue",
      "consumerQueue(bytes32,uint256):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Resonate__consumerQueueResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes()
    );
  }

  try_consumerQueue(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<Resonate__consumerQueueResult> {
    let result = super.tryCall(
      "consumerQueue",
      "consumerQueue(bytes32,uint256):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Resonate__consumerQueueResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes()
      )
    );
  }

  createPool(
    asset: Address,
    vault: Address,
    rate: BigInt,
    additionalRate: BigInt,
    lockupPeriod: BigInt,
    packetSize: BigInt,
    poolName: string
  ): Bytes {
    let result = super.call(
      "createPool",
      "createPool(address,address,uint128,uint128,uint32,uint256,string):(bytes32)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(vault),
        ethereum.Value.fromUnsignedBigInt(rate),
        ethereum.Value.fromUnsignedBigInt(additionalRate),
        ethereum.Value.fromUnsignedBigInt(lockupPeriod),
        ethereum.Value.fromUnsignedBigInt(packetSize),
        ethereum.Value.fromString(poolName)
      ]
    );

    return result[0].toBytes();
  }

  try_createPool(
    asset: Address,
    vault: Address,
    rate: BigInt,
    additionalRate: BigInt,
    lockupPeriod: BigInt,
    packetSize: BigInt,
    poolName: string
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,address,uint128,uint128,uint32,uint256,string):(bytes32)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(vault),
        ethereum.Value.fromUnsignedBigInt(rate),
        ethereum.Value.fromUnsignedBigInt(additionalRate),
        ethereum.Value.fromUnsignedBigInt(lockupPeriod),
        ethereum.Value.fromUnsignedBigInt(packetSize),
        ethereum.Value.fromString(poolName)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fnftIdToIndex(param0: BigInt): BigInt {
    let result = super.call(
      "fnftIdToIndex",
      "fnftIdToIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_fnftIdToIndex(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fnftIdToIndex",
      "fnftIdToIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pools(param0: Bytes): Resonate__poolsResult {
    let result = super.call(
      "pools",
      "pools(bytes32):(address,address,address,uint32,uint128,uint128,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Resonate__poolsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_pools(param0: Bytes): ethereum.CallResult<Resonate__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(bytes32):(address,address,address,uint32,uint128,uint128,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Resonate__poolsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  providerQueue(param0: Bytes, param1: BigInt): Resonate__providerQueueResult {
    let result = super.call(
      "providerQueue",
      "providerQueue(bytes32,uint256):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Resonate__providerQueueResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes()
    );
  }

  try_providerQueue(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<Resonate__providerQueueResult> {
    let result = super.tryCall(
      "providerQueue",
      "providerQueue(bytes32,uint256):(uint256,uint256,bytes32)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Resonate__providerQueueResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes()
      )
    );
  }

  queueMarkers(param0: Bytes): Resonate__queueMarkersResult {
    let result = super.call(
      "queueMarkers",
      "queueMarkers(bytes32):(uint64,uint64,uint64,uint64)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Resonate__queueMarkersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_queueMarkers(
    param0: Bytes
  ): ethereum.CallResult<Resonate__queueMarkersResult> {
    let result = super.tryCall(
      "queueMarkers",
      "queueMarkers(bytes32):(uint64,uint64,uint64,uint64)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Resonate__queueMarkersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  residuals(param0: BigInt): BigInt {
    let result = super.call("residuals", "residuals(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_residuals(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("residuals", "residuals(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultAdapters(param0: Address): Address {
    let result = super.call(
      "vaultAdapters",
      "vaultAdapters(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_vaultAdapters(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultAdapters",
      "vaultAdapters(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proxyOutputReceiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _proxyAddressLock(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _resonateHelper(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _smartWalletWhitelist(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _priceProvider(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _dev_address(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchClaimInterestCall extends ethereum.Call {
  get inputs(): BatchClaimInterestCall__Inputs {
    return new BatchClaimInterestCall__Inputs(this);
  }

  get outputs(): BatchClaimInterestCall__Outputs {
    return new BatchClaimInterestCall__Outputs(this);
  }
}

export class BatchClaimInterestCall__Inputs {
  _call: BatchClaimInterestCall;

  constructor(call: BatchClaimInterestCall) {
    this._call = call;
  }

  get fnftIds(): Array<Array<BigInt>> {
    return this._call.inputValues[0].value.toBigIntMatrix();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BatchClaimInterestCall__Outputs {
  _call: BatchClaimInterestCall;

  constructor(call: BatchClaimInterestCall) {
    this._call = call;
  }
}

export class ClaimInterestCall extends ethereum.Call {
  get inputs(): ClaimInterestCall__Inputs {
    return new ClaimInterestCall__Inputs(this);
  }

  get outputs(): ClaimInterestCall__Outputs {
    return new ClaimInterestCall__Outputs(this);
  }
}

export class ClaimInterestCall__Inputs {
  _call: ClaimInterestCall;

  constructor(call: ClaimInterestCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimInterestCall__Outputs {
  _call: ClaimInterestCall;

  constructor(call: ClaimInterestCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get vault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get rate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get additionalRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get lockupPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get packetSize(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get poolName(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ModifyExistingOrderCall extends ethereum.Call {
  get inputs(): ModifyExistingOrderCall__Inputs {
    return new ModifyExistingOrderCall__Inputs(this);
  }

  get outputs(): ModifyExistingOrderCall__Outputs {
    return new ModifyExistingOrderCall__Outputs(this);
  }
}

export class ModifyExistingOrderCall__Inputs {
  _call: ModifyExistingOrderCall;

  constructor(call: ModifyExistingOrderCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get position(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isProvider(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class ModifyExistingOrderCall__Outputs {
  _call: ModifyExistingOrderCall;

  constructor(call: ModifyExistingOrderCall) {
    this._call = call;
  }
}

export class ModifyVaultAdapterCall extends ethereum.Call {
  get inputs(): ModifyVaultAdapterCall__Inputs {
    return new ModifyVaultAdapterCall__Inputs(this);
  }

  get outputs(): ModifyVaultAdapterCall__Outputs {
    return new ModifyVaultAdapterCall__Outputs(this);
  }
}

export class ModifyVaultAdapterCall__Inputs {
  _call: ModifyVaultAdapterCall;

  constructor(call: ModifyVaultAdapterCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get adapter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ModifyVaultAdapterCall__Outputs {
  _call: ModifyVaultAdapterCall;

  constructor(call: ModifyVaultAdapterCall) {
    this._call = call;
  }
}

export class ReceiveRevestOutputCall extends ethereum.Call {
  get inputs(): ReceiveRevestOutputCall__Inputs {
    return new ReceiveRevestOutputCall__Inputs(this);
  }

  get outputs(): ReceiveRevestOutputCall__Outputs {
    return new ReceiveRevestOutputCall__Outputs(this);
  }
}

export class ReceiveRevestOutputCall__Inputs {
  _call: ReceiveRevestOutputCall;

  constructor(call: ReceiveRevestOutputCall) {
    this._call = call;
  }

  get fnftId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenHolder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ReceiveRevestOutputCall__Outputs {
  _call: ReceiveRevestOutputCall;

  constructor(call: ReceiveRevestOutputCall) {
    this._call = call;
  }
}

export class SubmitConsumerCall extends ethereum.Call {
  get inputs(): SubmitConsumerCall__Inputs {
    return new SubmitConsumerCall__Inputs(this);
  }

  get outputs(): SubmitConsumerCall__Outputs {
    return new SubmitConsumerCall__Outputs(this);
  }
}

export class SubmitConsumerCall__Inputs {
  _call: SubmitConsumerCall;

  constructor(call: SubmitConsumerCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shouldFarm(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SubmitConsumerCall__Outputs {
  _call: SubmitConsumerCall;

  constructor(call: SubmitConsumerCall) {
    this._call = call;
  }
}

export class SubmitProducerCall extends ethereum.Call {
  get inputs(): SubmitProducerCall__Inputs {
    return new SubmitProducerCall__Inputs(this);
  }

  get outputs(): SubmitProducerCall__Outputs {
    return new SubmitProducerCall__Outputs(this);
  }
}

export class SubmitProducerCall__Inputs {
  _call: SubmitProducerCall;

  constructor(call: SubmitProducerCall) {
    this._call = call;
  }

  get poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shouldFarm(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SubmitProducerCall__Outputs {
  _call: SubmitProducerCall;

  constructor(call: SubmitProducerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
